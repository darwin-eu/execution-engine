version: '3.8'

networks:
  execution_network:
    name: execution_network

services:
  
  nginx:
    image: nginx:latest
    container_name: nginx_container
    ports:
      - "80:80"
#      - "433:433"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
#      - /etc/letsencrypt/live/YOUR SERVER NAME/fullchain.pem:/etc/nginx/fullchain.pem \
#      - /etc/letsencrypt/live/YOUR SERVER NAME/privkey.pem:/etc/nginx/privkey.pem \
    networks: 
      - execution_network
    depends_on:
      engine-api:
        condition: service_healthy
        
  engine-ui:
    image: "execution-engine-ui:latest"
    environment:
      - BACKEND_BASE_URL=http://localhost/api/v1
      - AUTH_ENABLED=false
    networks: 
      - execution_network
  
  engine-api:
    image: "execution-engine-api:latest"
    restart: always
    environment:
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_DATASOURCE_URL=jdbc:postgresql://engine_db:5432/execution_engine
      - AUTHENTICATION_ENABLED=false
      - ENCRYPTION_KEY=PleaseEnterANew32CharacterString
    volumes:
      - ./studies:/app/files
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - execution_network
    healthcheck:
      test: "exit 0"
      interval: 20s
      timeout: 5s
      retries: 2
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
  
  db:
    container_name: engine_db
    image: "postgres:15.4"
    restart: always
    environment:
      - POSTGRES_DB=execution_engine
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - execution_network
    volumes:
      - ./db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10
