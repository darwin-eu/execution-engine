[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Darwin Execution Engine",
    "section": "",
    "text": "The Darwin Execution Engine is a web application that runs studies written with R code in pre-configured runtime environments using Docker.\nFeatures:\nThis guide describes everything you need to know to install, use, and extend the Darwin Execution Engine."
  },
  {
    "objectID": "index.html#why-use-execution-engine",
    "href": "index.html#why-use-execution-engine",
    "title": "Darwin Execution Engine",
    "section": "Why use Execution Engine?",
    "text": "Why use Execution Engine?\nThe Observational Health Data Science and Informatics (OHDSI) community is the largest federated network of standardized observational health data ever created. Using the OMOP Common Data Model and standard OHDSI vocabularies as a foundation, researchers can work across institutions to conduct network research. Darwin EU is pioneering this approach for regulatory use in the European Union.\nEven though the data and analytics are standardized, the execution environments where the analytic code runs are not. The word “environment” is somewhat overloaded in computer science so it is helpful to clearly define it. For the purpose of this website “runtime environment”, or simply “environment”, refers to the operating system, R/python versions, other system dependencies, and R package dependencies that the analytic code uses to run. The Execution Engine aims to standardize the runtime environment for OHDSI network studies and gives researchers greater confidence that their code will run successfully across a network of data nodes."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Darwin / OHDSI Execution Engine",
    "section": "Installation",
    "text": "Installation\nFor those that simply want to use execution engine it first needs to be installed."
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "Darwin / OHDSI Execution Engine",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "install-linux.html",
    "href": "install-linux.html",
    "title": "Install Execution Engine on Linux",
    "section": "",
    "text": "Install Docker according to instructions here\nhttps://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-22-04\nMake sure docker compose is installed and working\ndownload the following files from"
  },
  {
    "objectID": "install-mac.html",
    "href": "install-mac.html",
    "title": "Installing Execution Engine on Mac",
    "section": "",
    "text": "First,\n\nThen download and uzip this\n\nInside this folder you will find a configuration folder.\nIf you want to setup secure login see “Setting up security”.\nDecide which\nThen open a terminal and run\n\ndocker build"
  },
  {
    "objectID": "docker-registry-setup.html",
    "href": "docker-registry-setup.html",
    "title": "Building an execution engine Docker registry",
    "section": "",
    "text": "The Darwin Execution Engine requires an associated Docker registry. A Docker registry is a collection of multiple Docker repositories (repo). Each Docker repo contains on Docker image but can have multiple tagged versions of that single image.\nImportant: An installed instance of the Darwin Execution Engine can only use a single Docker Registry. This registry is set at installation time and cannot be changed without restarting the Execution Engine application.\nThe registry that will be used by a running instance of Execution Engine is set in the application.yml file. This is a configuration file that lets the person deploying the app in a local environment change certain settings for the app.\nBy default the application will point to the public Darwin EU Docker image repository but this article will teach you how to set up your own.\nTo point the Execution Engine to your own Dockerhub registry simply change the url in the yaml file.\nIf you are using a custom Docker registry you will need to populate it with images that will be used to run your R code. It is the responsibility of the code creators to ensure that their code runs in the specific image. The execution engine is only responsible for running your R code in a Docker container you specify but in general makes no promises that the code will run successfully. For that you need to test your code in it’s companion image. In the Darwin network we test our study code in the companion image prior to network execution and recommend that other users do the same.\nThe Darwin execution environments are specified in Dockerfiles in the execution-engine/execution-engine-runtime/DockerImages directory of the Execution Engine source code repository.\nEach runtime has an associated folder containing a Dockerfile and a readme. The Dockerfile is the document that specifies how to build the image. We start with a minimal image that has the minimum requirements for running any Darwin study. To build this image first make sure docker is running on your computer. Then navigate to the folder with the Dockerfile and run\nThen push the image to your repository after logging in. Make sure to set up login credentials according to your Docker registry’s instructions (e.g. ssh, token, etc).\nYou can create all the images you need to run studies but be sure to put them all in a single registry."
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Installing Execution Engine",
    "section": "",
    "text": "This page will walk through the steps to install and configure Execution Engine on Linux, Windows, and Mac OS. What you will need to succeed:\n\nAdmin permissions to install Docker\nAbility to create folders and text files\nAbility to run terminal/shell commands\n\nFirst install Docker Desktop for your system using the instructions provided on the Docker website here: https://docs.docker.com/engine/install/\nNext create a new directory/folder on your computer where you will put your configuration settings.\nChoose how you would like to set up security. There are three options:\n\nOpen ID Connect\nKeycloak\nNo security\n\nSince execution engine requires direct access to databases to run analyses security is recommended. The “No security” option is suitable for testing or if another security/login method is already in place.\nTo install Execution Engine without security simply copy and paste the following YAML into a new text file in your executionengine folder named compose.yml. You may choose to alter some of these settings if you with. Common changes might be setting AUTH_ENABLED=true in order to enable Open ID Connect. You might also want to change the database credentials and the 32 character string that is use as the ENCRYPTION_KEY . You should not need to change anything else but if you are familiar with Docker go right ahead and make the adjustments you need to the compose.yml file.\nversion: '3.8'\n\nservices:\n\n  engine-ui:\n    image: \"executionengine.azurecr.io/execution-engine-ui:dev\"\n    ports:\n      - \"4200:4200\"\n    environment:\n      - BACKEND_BASE_URL=http://localhost:8083/api/v1\n      - AUTH_ENABLED=false\n#      Required if you enable Open ID authentication by setting AUTH_ENABLED=true\n#      - OIDC_AUTHORITY=https://login.microsoftonline.com/1234-34532-34534/v2.0\n#      - OIDC_CLIENT_ID=2234e6c40-3451-49c6-a99e-234b8fff36a4b\n#      - OIDC_REDIRECT_URI=http://localhost:5173/deck-portal\n\n  engine-api:\n    image: \"executionengine.azurecr.io/execution-engine-api:dev\"\n    restart: always\n    ports:\n      - \"8083:8083\"\n    environment:\n      - SPRING_DATASOURCE_USERNAME=postgres\n      - SPRING_DATASOURCE_PASSWORD=postgres\n      - SPRING_DATASOURCE_URL=jdbc:postgresql://engine_db:5432/execution_engine\n      - AUTHENTICATION_ENABLED=false\n      - ENCRYPTION_KEY=PleaseEnterANew32CharacterString\n    volumes:\n      - ./studies:/app/files\n      - /var/run/docker.sock:/var/run/docker.sock\n    networks:\n      - execution_network\n    depends_on:\n      db:\n        condition: service_healthy\n\n  db:\n    container_name: engine_db\n    image: \"postgres:15.4\"\n    restart: always\n    environment:\n      - POSTGRES_DB=execution_engine\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    networks:\n      - execution_network\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    healthcheck:\n      test: [ \"CMD-SHELL\", \"pg_isready -U postgres\" ]\n      interval: 10s\n      timeout: 5s\n      retries: 10\n\nnetworks:\n  execution_network:\n    name: execution_network\n\nvolumes:\n  db-data:\nOnce you have saved the compose.yml file open a terminal, shell, or command prompt and navigate to the executionengine folder you just created. Run the following docker command.\n{bash, eval=FALSE} docker compose up -d\nThis tells docker to pull all of the necessary applications to start up the application. Note that this will not download any R runtime environments. If you are preparing an environment for offline execution then you will need to be sure to pull your images from the internet (wherever you R runtime images are located) down onto your local machine. Note that you may need to put these images on a USB drive to transfer them to an air-gapped computer.\nAfter running docker compose up -d and waiting a few minutes your instance of the Execution engine should be live at http://localhost:4200.\n\nConfigure Data Sources\nThe first thing you will want to do is configure access to one or more data sources in the OMOP Common Data Model (CDM) format. To do this go to the “Data Sources” tab and click the “New Data Source” button.\n\n\n\n\n\nMake sure to fill out as much information as you have about your data source. A “data source” represents a single OMOP CDM instance. For example, if you have three OMOP CDMs in a single database you will need to add three data sources, one for each OMOP CDM instance.\nThe values that you put in the form will be saved in the execution engine’s internal database. The password will be encrypted. The values will then be made available in R code as environment variables.\nFor example if your CDM Name is “Synpuf 100k”, R programmers will be able to access this value in their code using Sys.getenv('CDM_NAME') .\nThe database related environment variables available for R programmers are:\n\n\n\n\n\n\n\n\nData Source Field\nEnvironment variable\nDescription\n\n\n\n\n“Select a database”\nDBMS_TYPE\nThe database management system: postgresql, redshift, sql server, oracle, snowflake, spark\n\n\nCDM Name\nDATA_SOURCE_NAME\nThe name of the CDM\n\n\nOMOP CDM Version\nCDM_VERSION\nThe version of the OMOP CDM being used. Either 5.3 or 5.4\n\n\nJDBC Connection String\nCONNECTION_STRING\nThe JDBC connection string often used when connecting to the database with DatabaseConnector.\n\n\nDatabase Catalog\nDBMS_CATALOG\nSome databases have a compound schema (e.g. catalog.schema). For example SQL Server usually has something like cdm53.dbo for the full schema name. This field can be left blank if you do not need it.\n\n\nDatabase Server\nDBMS_SERVER\nThe database server name (e.g. pgsqltest1.abcd1234.us-east-1.rds.amazonaws.com)\n\n\nDatabase Name\nDBMS_NAME\nThe name of the database used to connect.\n\n\nDatabase Port\nDBMS_PORT\nThe port of the database used to connect.\n\n\nDatabase Username\nDBMS_USERNAME\nThe username used to connect to the database.\n\n\nDatabase Password\nDBMS_PASSWORD\nThe password used to connect to the database.\n\n\nCDM Schema\nDBMS_SCHEMA\nThe name of the schema that contains the OMOP CDM.\n\n\nTarget Schema\nTARGET_SCHEMA\nA schema where the user has write access.\n\n\nResult Schema\nRESULT_SCHEMA\nA schema where the user has write access.\n\n\nCohort Table Name\nCOHORT_TARGET_TABLE\nThe name of a table to use to store cohorts.\n\n\n\nImportant: All of these variables are optional and R study programmers have the option to use them or not in their R code. If the variable has not been set then the environment variable Sys.getenv('CDM_NAME'), will, by default, return the empty string ““."
  }
]